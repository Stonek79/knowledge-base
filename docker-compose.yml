name: knowledge-base

services:
    postgres:
        build:
            context: ./docker/postgres
            dockerfile: Dockerfile
        container_name: kb-postgres
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-knowledge_base}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - '5432:5432'
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-knowledge_base}',
                ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s
        networks:
            - kb-network

    minio:
        image: minio/minio:latest
        container_name: kb-minio
        restart: unless-stopped
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER:-kb_admin}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-kb_minio_password}
            MINIO_BROWSER: 'on'
        command: server /data --console-address ":9001"
        ports:
            - '9000:9000' # API
            - '9001:9001' # Web UI
        volumes:
            - minio_data:/data
        healthcheck:
            test:
                ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
            interval: 30s
            timeout: 20s
            retries: 3
            start_period: 30s
        networks:
            - kb-network

    redis:
        image: redis:7-alpine
        container_name: kb-redis
        restart: unless-stopped
        command: redis-server --requirepass ${REDIS_PASSWORD:-kb_redis_password} --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes
        ports:
            - '6379:6379'
        volumes:
            - redis_data:/data
        healthcheck:
            test:
                [
                    'CMD',
                    'redis-cli',
                    '-a',
                    '${REDIS_PASSWORD:-kb_redis_password}',
                    'ping',
                ]
            interval: 10s
            timeout: 3s
            retries: 5
            start_period: 30s
        networks:
            - kb-network

    gotenberg:
        image: gotenberg/gotenberg:8
        container_name: kb-gotenberg
        restart: unless-stopped
        environment:
            GOTENBERG_API_PORT: 3000
            GOTENBERG_LOG_LEVEL: info
        ports:
            - '3001:3000'
        volumes:
            - gotenberg_data:/tmp
            - /tmp/gotenberg-temp:/tmp/gotenberg:rw
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s
        networks:
            - kb-network

    app:
        image: stonek79/knowledge-base:${APP_VERSION:-latest}
        platform: linux/amd64
        container_name: kb-app
        restart: unless-stopped
        environment:
            NODE_ENV: ${NODE_ENV}
            DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-knowledge_base}
            REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
            MINIO_ENDPOINT: minio
            MINIO_PORT: ${MINIO_PORT:-9000}
            MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
            MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
            MINIO_BUCKET: ${MINIO_BUCKET}
            MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
            GOTENBERG_URL: http://gotenberg:${GOTENBERG_API_PORT:-3000}
            GOTENBERG_TIMEOUT: ${GOTENBERG_TIMEOUT}
            SEARCH_ENGINE: ${SEARCH_ENGINE:-flexsearch}
            FLEXSEARCH_RESOLUTION: ${FLEXSEARCH_RESOLUTION:-7}
            FLEXSEARCH_TOKENIZE: ${FLEXSEARCH_TOKENIZE:-full}
            FLEXSEARCH_CACHE: ${FLEXSEARCH_CACHE:-true}
        ports:
            - '3000:3000'
        volumes:
            - ./storage:/app/storage
            - ./prisma:/app/prisma
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_healthy
            redis:
                condition: service_healthy
            gotenberg:
                condition: service_healthy
        networks:
            - kb-network

volumes:
    postgres_data:
        driver: local
    minio_data:
        driver: local
    redis_data:
        driver: local
    gotenberg_data:
        driver: local

networks:
    kb-network:
        external: true
        name: kb-network
