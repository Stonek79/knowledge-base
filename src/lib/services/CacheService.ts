import Redis from 'ioredis';

import { CacheOperationResult, CacheOptions, CacheStats } from '../types/cache';

/**
 * –°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Redis –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export class CacheService {
    private client: Redis;
    private defaultTtl: number;
    private prefix: string;

    constructor() {
        this.client = new Redis({
            host: process.env.REDIS_HOST || 'localhost',
            port: parseInt(process.env.REDIS_PORT || '6379'),
            password: process.env.REDIS_PASSWORD,
            db: parseInt(process.env.REDIS_DB || '0'),
            enableAutoPipelining: true,
            showFriendlyErrorStack: false,
            maxRetriesPerRequest: 3,
            retryStrategy: (times: number) => Math.min(times * 50, 1000),
        });

        this.defaultTtl = 300; // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.prefix = process.env.REDIS_KEY_PREFIX || 'kb:';

        this.setupEventHandlers();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
     * @param key - –ö–ª—é—á –∫—ç—à–∞
     * @returns –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
     */
    async get<T>(key: string): Promise<T | null> {
        try {
            const fullKey = this.buildKey(key);
            const value = await this.client.get(fullKey);

            if (!value) return null;

            return JSON.parse(value) as T;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: ${error}`);
            return null;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à
     * @param key - –ö–ª—é—á –∫—ç—à–∞
     * @param value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @param options - –û–ø—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async set<T>(
        key: string,
        value: T,
        options: CacheOptions = {}
    ): Promise<CacheOperationResult> {
        try {
            const fullKey = this.buildKey(key);
            const ttl = options.ttl || this.defaultTtl;
            const serializedValue = JSON.stringify(value);

            if (ttl > 0) {
                await this.client.setex(fullKey, ttl, serializedValue);
            } else {
                await this.client.set(fullKey, serializedValue);
            }

            return { success: true };
        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            };
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
     * @param key - –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    async delete(key: string): Promise<CacheOperationResult> {
        try {
            const fullKey = this.buildKey(key);
            await this.client.del(fullKey);
            return { success: true };
        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            };
        }
    }

    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
     */
    async invalidateSearchResults(): Promise<CacheOperationResult> {
        try {
            const pattern = this.buildKey('search:*');
            const keys = await this.client.keys(pattern);

            if (keys.length > 0) {
                await this.client.del(...keys);
            }

            return { success: true };
        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            };
        }
    }

    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
     * @param pattern - –ü–∞—Ç—Ç–µ—Ä–Ω –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    async invalidateByPattern(pattern: string): Promise<CacheOperationResult> {
        try {
            const fullPattern = this.buildKey(pattern);
            const keys = await this.client.keys(fullPattern);

            if (keys.length > 0) {
                await this.client.del(...keys);
            }

            return { success: true };
        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
     * @returns –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
     */
    async getStats(): Promise<CacheStats> {
        try {
            const info = await this.client.info('memory');
            const keys = await this.client.dbsize();

            // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è hit rate
            const hitRate = 0.8; // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç

            return {
                totalKeys: keys,
                memoryUsage: 0, // TODO: –ò–∑–≤–ª–µ—á—å –∏–∑ info
                hitRate,
                lastCleanup: new Date(),
            };
        } catch (error) {
            return {
                totalKeys: 0,
                memoryUsage: 0,
                hitRate: 0,
            };
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
     */
    async clear(): Promise<CacheOperationResult> {
        try {
            await this.client.flushdb();
            return { success: true };
        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            };
        }
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis
     */
    async disconnect(): Promise<void> {
        await this.client.quit();
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –∫–ª—é—á —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
     * @param key - –ë–∞–∑–æ–≤—ã–π –∫–ª—é—á
     * @returns –ü–æ–ª–Ω—ã–π –∫–ª—é—á —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
     */
    private buildKey(key: string): string {
        return `${this.prefix}${key}`;
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Redis
     */
    private setupEventHandlers(): void {
        this.client.on('connect', () => {
            console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
        });

        this.client.on('error', error => {
            console.error('‚ùå Redis –æ—à–∏–±–∫–∞:', error);
        });

        this.client.on('close', () => {
            console.log('üîå Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const cacheService = new CacheService();
