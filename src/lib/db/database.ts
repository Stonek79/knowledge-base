// lib/database.ts
import { PrismaClient } from '@prisma/client';

class DatabaseService {
    private prisma: PrismaClient;
    private retryAttempts = 5;
    private retryDelay = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

    constructor() {
        this.prisma = new PrismaClient({
            log: ['error', 'warn'],
            datasources: {
                db: {
                    url: process.env.DATABASE_URL,
                },
            },
        });
    }

    async connect(): Promise<void> {
        let attempts = 0;

        while (attempts < this.retryAttempts) {
            try {
                console.log(
                    `üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (${attempts + 1}/${this.retryAttempts})`
                );
                await this.prisma.$connect();
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                return;
            } catch (error) {
                attempts++;
                console.error(
                    `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}):`,
                    error instanceof Error && error?.message
                );

                if (attempts < this.retryAttempts) {
                    console.log(
                        `‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${this.retryDelay}ms...`
                    );
                    await this.delay(this.retryDelay);
                    this.retryDelay *= 1.5; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                } else {
                    console.error(
                        'üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫'
                    );
                    throw new Error('Database connection failed');
                }
            }
        }
    }

    async disconnect(): Promise<void> {
        await this.prisma.$disconnect();
    }

    getClient(): PrismaClient {
        return this.prisma;
    }

    private delay(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

export const databaseService = new DatabaseService();
